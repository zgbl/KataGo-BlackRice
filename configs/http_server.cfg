# KataGo HTTP服务器配置文件
# 这个配置文件专门用于HTTP服务模式
# 基于analysis_docker.cfg，针对HTTP服务进行了优化

# =============================================================================
# 日志配置
# =============================================================================

# 日志目录
logDir = /app/logs

# 日志文件名
logFile = katago_http.log

# 是否记录所有请求
logAllRequests = true

# 是否记录所有响应 (生产环境建议设为false)
logAllResponses = false

# 是否记录时间戳
logTimeStamp = true

# 是否记录搜索信息 (调试时有用)
logSearchInfo = false

# 日志级别 (0=最少, 1=正常, 2=详细)
logLevel = 1

# =============================================================================
# HTTP服务器配置
# =============================================================================

# HTTP服务端口
analysisHttpPort = 8080

# HTTP服务绑定地址 (0.0.0.0表示所有接口)
analysisHttpAddress = 0.0.0.0

# 备用HTTP端口 (可选)
# analysisHttpPort2 = 8081

# HTTP请求最大大小 (字节)
analysisHttpMaxRequestSize = 67108864  # 64MB

# HTTP连接超时时间 (秒)
analysisHttpTimeout = 30

# HTTP保持连接时间 (秒)
analysisHttpKeepAlive = 60

# 最大并发HTTP连接数
analysisHttpMaxConnections = 100

# 启用CORS (跨域资源共享)
analysisHttpEnableCors = true

# CORS允许的源 (多个用逗号分隔，*表示所有)
analysisHttpCorsOrigins = *

# =============================================================================
# 分析引擎配置
# =============================================================================

# 神经网络模型文件
nnModelFile = /app/models/model.bin.gz

# 分析线程数 (建议设为CPU核心数)
numAnalysisThreads = 4

# 最大并发评估数
maxConcurrentEvals = 2

# 最大批处理大小
maxBatchSize = 8

# 默认最大访问数
defaultMaxVisits = 1000

# 默认最大游戏数
defaultMaxPlayouts = 10000

# 默认最大时间 (秒)
defaultMaxTime = 10.0

# =============================================================================
# GPU配置
# =============================================================================

# 神经网络后端 (cuda, opencl, eigen)
nnBackend = cuda

# CUDA GPU设备ID (-1表示自动选择)
cudaGpuToUse = 0

# 神经网络最大批处理大小
nnMaxBatchSize = 32

# 神经网络缓存大小 (2的幂)
nnCacheSizePowerOfTwo = 20

# 神经网络互斥锁池大小
nnMutexPoolSize = 16

# 是否使用FP16 (半精度浮点)
nnUseFP16 = auto

# =============================================================================
# 搜索配置
# =============================================================================

# 搜索线程数
numSearchThreads = 8

# 搜索线程数每个评估
numSearchThreadsPerAnalysisThread = 2

# MCTS探索常数
cpuctExploration = 1.0

# MCTS探索常数基数
cpuctExplorationLog = 0.45

# FPU (First Play Urgency) 减少
fpuReductionMax = 0.2

# 根节点噪声权重
rootNoiseEnabled = true
rootDirichletNoiseTotalConcentration = 10.83
rootDirichletNoiseWeight = 0.25

# =============================================================================
# 规则配置
# =============================================================================

# 默认规则
rules = chinese

# 默认贴目
koRule = POSITIONAL
scoringRule = AREA
taxRule = NONE
multiStoneSuicideLegal = false
hasButton = false
encorePhase = 0
whiteHandicapBonus = 0

# =============================================================================
# 性能优化
# =============================================================================

# 是否使用NNUE评估
useNNUE = false

# 是否启用pondering (后台思考)
pondering = false

# 最大pondering时间
maxPonderTime = 60.0

# 是否重用搜索树
reuseSubtree = true

# 搜索树最大节点数
maxTreeMemoryMB = 1024

# =============================================================================
# 安全配置
# =============================================================================

# 是否启用API密钥认证
# analysisHttpApiKey = your_secret_api_key_here

# 是否启用速率限制
analysisHttpEnableRateLimit = true

# 每秒最大请求数
analysisHttpRateLimitPerSecond = 10

# 分析请求每秒最大数
analysisHttpAnalysisRateLimitPerSecond = 2

# 是否记录客户端IP
analysisHttpLogClientIp = true

# =============================================================================
# HTTP特定设置
# =============================================================================

# 是否启用健康检查端点
analysisHttpEnableHealthCheck = true

# 健康检查路径
analysisHttpHealthCheckPath = /health

# 是否启用信息端点
analysisHttpEnableInfoEndpoint = true

# 信息端点路径
analysisHttpInfoEndpointPath = /info

# 是否启用指标端点 (Prometheus)
analysisHttpEnableMetrics = true

# 指标端点路径
analysisHttpMetricsPath = /metrics

# 指标端口 (可选，使用单独端口)
analysisHttpMetricsPort = 9090

# =============================================================================
# 缓存配置
# =============================================================================

# 是否启用结果缓存
analysisHttpEnableCache = true

# 缓存类型 (memory, redis)
analysisHttpCacheType = memory

# 内存缓存大小 (条目数)
analysisHttpMemoryCacheSize = 1000

# 缓存过期时间 (秒)
analysisHttpCacheExpireTime = 3600

# Redis配置 (如果使用Redis缓存)
# analysisHttpRedisHost = redis
# analysisHttpRedisPort = 6379
# analysisHttpRedisDb = 0
# analysisHttpRedisPassword = 

# =============================================================================
# 调试配置
# =============================================================================

# 是否启用调试模式
debugMode = false

# 是否输出详细错误信息
verboseErrors = false

# 是否启用性能分析
enableProfiling = false

# 性能分析输出文件
# profilingOutputFile = /app/logs/profiling.log

# =============================================================================
# 高级配置
# =============================================================================

# 是否启用实验性功能
enableExperimentalFeatures = false

# 自定义用户代理
# customUserAgent = KataGo-HTTP-Server/1.0

# 请求ID前缀
requestIdPrefix = katago_

# 是否启用请求追踪
enableRequestTracing = true

# 追踪采样率 (0.0-1.0)
tracingSampleRate = 0.1

# =============================================================================
# 监控配置
# =============================================================================

# 是否启用系统监控
enableSystemMonitoring = true

# 监控间隔 (秒)
monitoringInterval = 30

# 是否监控GPU使用情况
monitorGpuUsage = true

# 是否监控内存使用情况
monitorMemoryUsage = true

# 是否监控CPU使用情况
monitorCpuUsage = true

# =============================================================================
# 备份和恢复
# =============================================================================

# 是否启用自动备份
enableAutoBackup = false

# 备份间隔 (小时)
backupInterval = 24

# 备份目录
backupDirectory = /app/backups

# 备份保留天数
backupRetentionDays = 7

# =============================================================================
# 集群配置 (多实例部署)
# =============================================================================

# 是否启用集群模式
enableClusterMode = false

# 集群节点ID
# clusterNodeId = node1

# 集群发现方式 (static, consul, etcd)
# clusterDiscoveryType = static

# 静态集群节点列表
# clusterStaticNodes = node1:8080,node2:8080

# =============================================================================
# 自定义配置
# =============================================================================

# 自定义配置文件路径 (可选)
# customConfigFile = /app/configs/custom.cfg

# 自定义脚本路径 (可选)
# customScriptPath = /app/scripts/custom.sh

# 环境特定配置
# environment = production  # development, staging, production

# =============================================================================
# 注释说明
# =============================================================================

# 这个配置文件针对HTTP服务进行了优化，主要特点：
# 
# 1. 启用了HTTP服务器相关的所有功能
# 2. 配置了合理的默认值用于生产环境
# 3. 启用了监控和日志记录
# 4. 包含了安全相关的配置选项
# 5. 支持缓存和性能优化
# 
# 使用建议：
# - 根据实际硬件调整线程数和批处理大小
# - 在生产环境中启用API密钥认证
# - 根据负载调整速率限制
# - 定期检查日志和监控指标
# - 根据需要启用Redis缓存