version: '3.8'

# 生产环境配置 - 包含负载均衡、监控、日志收集
services:
  # KataGo HTTP服务 - 主实例
  katago-http-1:
    build:
      context: ../../
      dockerfile: http_server/docker/Dockerfile.http
    container_name: katago-http-1
    restart: always
    expose:
      - "8080"
    volumes:
      - ../configs/katago_http.cfg:/app/configs/katago_http.cfg:ro
      - ../../models:/app/models:ro
      - ../logs/instance1:/app/logs
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - NVIDIA_VISIBLE_DEVICES=0
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - KATAGO_CONFIG=/app/configs/katago_http.cfg
      - KATAGO_MODEL=/app/models/model.bin.gz
      - LOG_LEVEL=INFO
      - INSTANCE_ID=1
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['0']
              capabilities: [gpu]
    networks:
      - katago-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # KataGo HTTP服务 - 备用实例
  katago-http-2:
    build:
      context: ../../
      dockerfile: http_server/docker/Dockerfile.http
    container_name: katago-http-2
    restart: always
    expose:
      - "8080"
    volumes:
      - ../configs/katago_http.cfg:/app/configs/katago_http.cfg:ro
      - ../../models:/app/models:ro
      - ../logs/instance2:/app/logs
    environment:
      - CUDA_VISIBLE_DEVICES=1
      - NVIDIA_VISIBLE_DEVICES=1
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - KATAGO_CONFIG=/app/configs/katago_http.cfg
      - KATAGO_MODEL=/app/models/model.bin.gz
      - LOG_LEVEL=INFO
      - INSTANCE_ID=2
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['1']
              capabilities: [gpu]
    networks:
      - katago-network
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    profiles:
      - multi-gpu

  # Nginx负载均衡器
  nginx:
    image: nginx:alpine
    container_name: katago-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../configs/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../logs/nginx:/var/log/nginx
      - ./ssl:/etc/ssl/certs:ro  # SSL证书目录
    depends_on:
      - katago-http-1
    networks:
      - katago-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: katago-redis
    restart: always
    expose:
      - "6379"
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - katago-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: katago-prometheus-prod
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - katago-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Grafana仪表板
  grafana:
    image: grafana/grafana:latest
    container_name: katago-grafana-prod
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    depends_on:
      - prometheus
    networks:
      - katago-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # ELK Stack - Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: katago-elasticsearch
    restart: always
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    expose:
      - "9200"
    networks:
      - katago-network
    profiles:
      - with-elk

  # ELK Stack - Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: katago-logstash
    restart: always
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ../logs:/app/logs:ro
    depends_on:
      - elasticsearch
    networks:
      - katago-network
    profiles:
      - with-elk

  # ELK Stack - Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: katago-kibana
    restart: always
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - katago-network
    profiles:
      - with-elk

  # Node Exporter (系统监控)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: katago-node-exporter
    restart: always
    expose:
      - "9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - katago-network

  # cAdvisor (容器监控)
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: katago-cadvisor
    restart: always
    expose:
      - "8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - katago-network

networks:
  katago-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  prometheus-data:
  grafana-data:
  elasticsearch-data:
  redis-data: